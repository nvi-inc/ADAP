from utils import app
from schedule import get_schedule, sched_reader


def make_vex(session):
    skd, vex = session.file_path('skd'), session.file_path('vex')
    if vex.exists():
        print(f'{session.code} has vex file')
        return
    # Get sked command to create vex file
    sked = app.Applications.Sked
    action = sked['vex'].format(path=str(session.file_path('vex')))
    ans, err = app.exec_and_wait(f"{sked['exec']} {str(skd)}", action=action)
    if err:
        print(f'SKED failed to create {vex.name}', err)
    elif vex.exists():
        print(f'SKED created {vex.name}', err)
    else:
        print(f'SKED did not failed but {vex.name} has not been created')


def same_skd_vex(session):

    skd, vex = get_schedule(session), get_schedule(session, vex_first=True)
    if not vex.is_vex:
        print(f'{session.code} has no vex file')
        return False
    if skd == vex:
        print(f'skd and vex generated by {skd.scheduling_software} are the same for {session.code}')
    elif skd.scheduling_software == 'VieSched++':
        skd = get_schedule(session, VieSched_sort=True)
        print(f'skd and vex generated by {skd.scheduling_software} are '
              f'{"the same but reverse" if skd == vex else "not the same"} for {session.code}')
    else:
        print(f'skd and vex generated by {skd.scheduling_software} are NOT the same for {session.code}')


if __name__ == '__main__':

    from ivsdb import IVSdata
    import argparse

    parser = argparse.ArgumentParser(description='Test schedule pages')
    parser.add_argument('-c', '--config', help='control file', required=True)
    parser.add_argument('-d', '--db', help='database name', default='ivscc', required=False)
    parser.add_argument('-v', '--vex', help='use vex', action='store_true')
    parser.add_argument('-s', '--same', help='use vex', action='store_true')
    parser.add_argument('-r', '--rejected', help='list of rejected station', required=False)
    parser.add_argument('-m', '--make_vex', help='make vex file', action='store_true')
    parser.add_argument('code', help='IVS session code')

    app.init(parser.parse_args())

    db_url = app.load_control_file(name=app.ControlFiles.Database)[-1]['Credentials'][app.args.db]

    with IVSdata(db_url, app.tunnel(app.args.db)) as dbase:
        if session := dbase.get_session(app.args.code):
            if app.args.same:
                same_skd_vex(session)
            elif app.args.make_vex:
                make_vex(session)
            else:
                with sched_reader(session, app.args.vex) as f:
                    f.read()
                    f.summary(app.args.rejected)
