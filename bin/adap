#!/usr/bin/env python3
import os
import sys
import re
import ssl
import shutil
import urllib.request

from pathlib import Path
from subprocess import Popen, PIPE

repository = 'https://github.com/nvi-inc/ADAP.git'
pyproject = "https://raw.githubusercontent.com/nvi-inc/ADAP/refs/heads/master/pyproject.toml"

class Version:
    validate = re.compile(r'(?P<version>\d+)\.(?P<release>\d+)\.?(?P<modification>\d?)').match
    def __init__(self, text):
        self.version = self.release = self.modification = None
        if match := self.validate(re.sub(r'[^0-9.]', '', text)):
            self.version, self.release, self.modification = match['version'], match['release'], match['modification']

    def __str__(self):
        modification = f".{self.modification}" if self.modification else ""
        return f"{self.version}.{self.release}{modification}"

    def __eq__(self, other):
        same = True if not all((self.modification, other.modification)) else self.modification == other.modification
        return all((self.version == other.version, self.release == other.release, same))

    @property
    def valid(self):
        return all((self.version, self.release))


def execute(cmd):
    st_out, st_err = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE).communicate()
    return ' '.join(map(bytes.decode, filter(lambda item: item is not None, [st_out, st_err]))).strip()


def install_uv():
    if not shutil.which('uv'):
        ans = execute(cmd := "curl -LsSf https://astral.sh/uv/install.sh | sh")
        if match := re.search(r'installing to\s*([^\s]*)', ans):
            print(f'installed uv at {match.groups(0)[0]}')


def kill(app_name='all'):
    from pathlib import Path
    from psutil import Process, process_iter
    import os

    for prc in process_iter(attrs=['pid', 'name', 'cmdline']):
        if prc.info['name'] == 'python':

            name = [os.path.basename(path) for path in prc.info['cmdline'] if path.startswith('/sgpvlbi/progs/adap')]
            if name and (name := name[0].replace('.py', '')) not in ['VLBIintmonit']:
                try:
                    Process(prc.info['pid']).kill()
                    print(f'Successfully killed process {name} {prc.info["pid"]}')
                except Exception as err:
                    print(f'Failed killing process {name} {prc.info["pid"]}. [{str(err)}]')

def check_github(adap):
    """
    Read version number from pyproject.toml (from github file)
    The toml package is not used since it is not part of python3 package
    :param path:
    :return:
    """
    ssl._create_default_https_context = ssl._create_unverified_context
    with urllib.request.urlopen(pyproject) as rsp:
        for line in rsp.read().decode('utf-8').splitlines():
            if line.strip().startswith('version'):
                if (github := Version(line.partition('=')[-1])) == adap:
                    print(f'github version {github}')
                    return
                raise Exception(f'github has different version {github}')
    raise Exception('could not detect version number in github repository')


def make_version(root, adap):

    # Check that github repository has same version
    check_github(adap)
    # Check if folder exist
    if (folder := Path(root, f'adap_v{adap}')).exists():
        raise Exception(f"{folder} exists! Use: adap update {adap}")
    # Clone git repository
    ans = execute(cmd := f'git clone {repository} {folder}')
    if not Path(folder, '.git').exists():
        raise Exception('\n'.join([f"{cmd} failed!", f"Output message {ans}"]))
    print(ans)
    # Move to folder and execute uv to create virtual environment
    os.chdir(folder)
    # Execute script to create virtual environment
    ans = execute('uv venv venv && uv pip install -r pyproject.toml --python venv --link-mode=copy ')
    print('\n'.join([line for line in ans.splitlines() if not line.startswith(' +')]))
    link = Path(root, f'adap_v{adap.version}')
    # Change link to new folder
    execute(f"ln -sfn {folder} {link}")
    # Kill all VLBI applications attached to RabbitMQ



if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='ADAP package installation')

    parser.add_argument('-r', '--root', help='root path', default='/sgpvlbi/progs/', required=False)
    parser.add_argument('action', help='action to do', choices=['make', 'update'])
    parser.add_argument('version', help='ADAP version')

    args =parser.parse_args()

    install_uv()

    try:
        # Make sure version is valid
        if not (version := Version(args.version)).valid:
            raise Exception('invalid version numbering')
        if args.action == 'make':
            make_version(args.root, version)
    except Exception as exc:
        print(f'Problem running adap {args.action} {args.version}')
        print(str(exc))
